name: Android CI

on:
  push:
    branches: ["develop"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set Timezone to Asia/Shanghai
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "Current time: $(date)"
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史
          
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle
          
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: wrapper
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
          
      - name: Build with Gradle
        run: ./gradlew assembleNormalRelease assembleCompatibleRelease -Pversion=${{ github.ref_name }}
        
      - name: Locate APKs and Set Outputs
        id: locate_apks
        run: |
          normal_apk=$(find app/build/outputs/apk/normal/release -name "*.apk" | head -n 1)
          compatible_apk=$(find app/build/outputs/apk/compatible/release -name "*.apk" | head -n 1)
          echo "normal_apk=$normal_apk" >> $GITHUB_OUTPUT
          echo "compatible_apk=$compatible_apk" >> $GITHUB_OUTPUT
          
      - name: Copy APKs to staging for signing
        run: |
          mkdir -p app/build/outputs/apk/all
          cp "${{ steps.locate_apks.outputs.normal_apk }}" app/build/outputs/apk/all/
          cp "${{ steps.locate_apks.outputs.compatible_apk }}" app/build/outputs/apk/all/
          
      - name: Sign APKs
        id: sign_apks
        uses: ilharp/sign-android-release@v2
        with:
          releaseDir: app/build/outputs/apk/all
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          buildToolsVersion: 36.0.0
          
      - name: Extract Signed APK Paths
        id: extract_apks
        run: |
          IFS=':' read -r -a files <<< "${{ steps.sign_apks.outputs.signedFiles }}"
          for file in "${files[@]}"; do
            if [[ "$file" == *Normal* ]]; then
              echo "signed_normal=$file" >> $GITHUB_OUTPUT
            elif [[ "$file" == *Compatible* ]]; then
              echo "signed_compatible=$file" >> $GITHUB_OUTPUT
            fi
          done
          
      - name: Extract file names and version
        id: extract_info
        run: |
          normal_file=$(basename "${{ steps.extract_apks.outputs.signed_normal }}")
          compatible_file=$(basename "${{ steps.extract_apks.outputs.signed_compatible }}")
          
          # 从文件名提取版本号
          version=$(echo "$normal_file" | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+)-.*/\1/')
          
          echo "normal_file=$normal_file" >> $GITHUB_OUTPUT
          echo "compatible_file=$compatible_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          
      - name: Generate APKS Checksum
        run: |
          sha256sum ${{ steps.extract_apks.outputs.signed_normal }} > CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.sha256
          sha256sum ${{ steps.extract_apks.outputs.signed_compatible }} > CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.sha256
          
      - name: Get Commit Details
        id: commit_details
        run: |
          # 获取当前发布的标签名
          CURRENT_TAG="${{ github.event.release.tag_name || 'HEAD' }}"
          
          # 获取上一个标签（用于比较）
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$CURRENT_TAG"^ 2>/dev/null || echo "")
          
          COMMIT_MESSAGE_BODY=$(
            if [[ "${{ github.event_name }}" == "push" ]]; then
              echo "🔨 $(git rev-list --count ${{ github.event.before }}..${{ github.event.after }}) new commits to ${{ github.repository }}:${{ github.ref_name }}"
              echo "[Compare changes](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }})"
              echo ""
              git log --format="* %s ([%h](https://github.com/${{ github.repository }}/commit/%H)) by %an" ${{ github.event.before }}..${{ github.event.after }} --no-merges
              
            elif [[ "${{ github.event_name }}" == "release" ]]; then
              if [ -z "$PREVIOUS_TAG" ]; then
                # 没有找到前一个标签（首次发布）
                echo "✨ Initial release: $CURRENT_TAG"
                echo ""
                echo "### All commits:"
                git log --format="* %s ([%h](https://github.com/${{ github.repository }}/commit/%H)) by %an" --no-merges
              else
                # 比较两个标签之间的提交
                echo "✨ Changes from $PREVIOUS_TAG to $CURRENT_TAG"
                echo "[Compare changes](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)"
                echo ""
                git log --format="* %s ([%h](https://github.com/${{ github.repository }}/commit/%H)) by %an" --no-merges "$PREVIOUS_TAG..$CURRENT_TAG"
              fi
              
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "⚙️ Manual workflow run on ${{ github.ref_name }} by ${{ github.actor }}"
              echo ""
              echo "### Latest commit:"
              git log -1 --format="* %s ([%h](https://github.com/${{ github.repository }}/commit/%H)) by %an"
              
            else
              echo "ℹ️ Commit information for ${{ github.event_name }} event on ${{ github.ref_name }}:"
              echo ""
              git log -1 --format="* %s ([%h](https://github.com/${{ github.repository }}/commit/%H)) by %an"
            fi
          )
          
          echo "COMMIT_MESSAGE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Upload Assets to Release
        uses: softprops/action-gh-release@v2
        with:
          # 使用手动创建的标签名或自动提取的版本号
          tag_name: ${{ github.event.release.tag_name || steps.extract_info.outputs.version }}
          name: Release ${{ github.event.release.tag_name || steps.extract_info.outputs.version }}
          files: |
            ${{ steps.extract_apks.outputs.signed_normal }}
            ${{ steps.extract_apks.outputs.signed_compatible }}
            CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.sha256
            CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.sha256
          draft: false
          generate_release_notes: false
          body: |
            ## 🚀 Release Notes
            
            ${{ steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}
            
            ---
            
            ### 📥 Download Information
            * **Normal Version**: Android 8.0+ 
            * **Compatible Version**: Android 5.1-7.1
            
            ### 🔒 Verification
            Verify APK integrity with SHA256 checksums
